Andrew Elcock
ame45


Benchmark runs:

1) StringBuilderStrand

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                		splicee			recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.031	1290
StringBuilderStrand:	            512	      4,965,591	0.023	1290
StringBuilderStrand:	          1,024	      5,295,831	0.012	1290
StringBuilderStrand:	          2,048	      5,956,311	0.011	1290
StringBuilderStrand:	          4,096	      7,277,271	0.009	1290
StringBuilderStrand:	          8,192	      9,919,191	0.008	1290
StringBuilderStrand:	         16,384	     15,203,031	0.014	1290
StringBuilderStrand:	         32,768	     25,770,711	0.027	1290
StringBuilderStrand:	         65,536	     46,906,071	0.031	1290
StringBuilderStrand:	        131,072	     89,176,791	0.073	1290
StringBuilderStrand:	        262,144	    173,718,231	0.190	1290
StringBuilderStrand:	        524,288	    342,801,111	0.294	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space

2) StringStrand

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.629	1290
StringStrand:	            512	      4,965,591	0.602	1290
StringStrand:	          1,024	      5,295,831	0.628	1290
StringStrand:	          2,048	      5,956,311	0.725	1290
StringStrand:	          4,096	      7,277,271	0.905	1290
StringStrand:	          8,192	      9,919,191	1.297	1290
StringStrand:	         16,384	     15,203,031	2.053	1290
StringStrand:	         32,768	     25,770,711	4.006	1290
StringStrand:	         65,536	     46,906,071	7.341	1290
StringStrand:	        131,072	     89,176,791	13.234	1290
StringStrand:	        262,144	    173,718,231	23.566	1290
StringStrand:	        524,288	    342,801,111	42.987	1290
StringStrand:	      1,048,576	    680,966,871	111.066	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space

3) LinkStrand

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.022	1290
LinkStrand:	            512	      4,965,591	0.016	1290
LinkStrand:	          1,024	      5,295,831	0.006	1290
LinkStrand:	          2,048	      5,956,311	0.005	1290
LinkStrand:	          4,096	      7,277,271	0.004	1290
LinkStrand:	          8,192	      9,919,191	0.005	1290
LinkStrand:	         16,384	     15,203,031	0.006	1290
LinkStrand:	         32,768	     25,770,711	0.005	1290
LinkStrand:	         65,536	     46,906,071	0.003	1290
LinkStrand:	        131,072	     89,176,791	0.006	1290
LinkStrand:	        262,144	    173,718,231	0.007	1290
LinkStrand:	        524,288	    342,801,111	0.004	1290
LinkStrand:	      1,048,576	    680,966,871	0.005	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.003	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.004	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.006	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.005	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.011	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.010	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.005	1290
LinkStrand:	    268,435,456	173,145,504,471	0.005	1290
LinkStrand:	    536,870,912	346,286,373,591	0.008	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space


Question 1: are the benchmark timings for StringStrand 
consistent with the explanation below that the time 
to execute cutAndSplice is O(b^2*S)? 

Yes.  As S doubles, the runtime roughly doubles as well.  Moreover,
it takes a significantly longer time than StringBuilderStrand, which
has a runtime of b*S, suggesting that StringStrand has a runtime of
b^2 instead of b.

Question 2: are the benchmark timings for StringBuilderStrand
consistent with the explanation below that the time to 
execute cutAndSplice is O(bS)? 

Yes.  As S doubles, the runtime roughly doubles as well.  This suggests
that the runtime is multiplied by S.  We cannot be sure whether the hypothesis
about b is correct, but since it is significantly faster than StringStrand,
which has a runtime of b^2 * S, it suggests that the b term is lower and likely
not squared.

Question 3: Explain why the time for LinkStrand does not 
change much at all over all the runs in the benchmark 
program. Explain why you think memory is exhausted at the 
specific strand size you see in your timings -- as compared to
exhaustion for String and StringBuilder.

This is because the node structure means that we don't have to create a new string
and recreate the string each time LinkStrand is run.  Instead, we can just change 
the pointer of a node--an O(1) function--each time we must splice.  Thus, it is 
significantly quicker and scales faster.  It exhausts at this specific size because
the next up would be greater than the max size for Java to allow due to the way it stores
data using binary.

